//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace EzTravelWeb.SessionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SessionService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getDeviceID", ReplyAction="http://tempuri.org/IService1/getDeviceIDResponse")]
        System.IAsyncResult BegingetDeviceID(System.AsyncCallback callback, object asyncState);
        
        string EndgetDeviceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setDeviceChannel", ReplyAction="http://tempuri.org/IService1/setDeviceChannelResponse")]
        System.IAsyncResult BeginsetDeviceChannel(string deviceID, string channel, System.AsyncCallback callback, object asyncState);
        
        bool EndsetDeviceChannel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/checkExists", ReplyAction="http://tempuri.org/IService1/checkExistsResponse")]
        System.IAsyncResult BegincheckExists(string deviceID, string channel, System.AsyncCallback callback, object asyncState);
        
        bool EndcheckExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/delete", ReplyAction="http://tempuri.org/IService1/deleteResponse")]
        System.IAsyncResult Begindelete(System.AsyncCallback callback, object asyncState);
        
        bool Enddelete(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : EzTravelWeb.SessionService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class setDeviceChannelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public setDeviceChannelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class checkExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public checkExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<EzTravelWeb.SessionService.IService1>, EzTravelWeb.SessionService.IService1 {
        
        private BeginOperationDelegate onBegingetDeviceIDDelegate;
        
        private EndOperationDelegate onEndgetDeviceIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetDeviceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetDeviceChannelDelegate;
        
        private EndOperationDelegate onEndsetDeviceChannelDelegate;
        
        private System.Threading.SendOrPostCallback onsetDeviceChannelCompletedDelegate;
        
        private BeginOperationDelegate onBegincheckExistsDelegate;
        
        private EndOperationDelegate onEndcheckExistsDelegate;
        
        private System.Threading.SendOrPostCallback oncheckExistsCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteDelegate;
        
        private EndOperationDelegate onEnddeleteDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<getDeviceIDCompletedEventArgs> getDeviceIDCompleted;
        
        public event System.EventHandler<setDeviceChannelCompletedEventArgs> setDeviceChannelCompleted;
        
        public event System.EventHandler<checkExistsCompletedEventArgs> checkExistsCompleted;
        
        public event System.EventHandler<deleteCompletedEventArgs> deleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EzTravelWeb.SessionService.IService1.BegingetDeviceID(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDeviceID(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string EzTravelWeb.SessionService.IService1.EndgetDeviceID(System.IAsyncResult result) {
            return base.Channel.EndgetDeviceID(result);
        }
        
        private System.IAsyncResult OnBegingetDeviceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((EzTravelWeb.SessionService.IService1)(this)).BegingetDeviceID(callback, asyncState);
        }
        
        private object[] OnEndgetDeviceID(System.IAsyncResult result) {
            string retVal = ((EzTravelWeb.SessionService.IService1)(this)).EndgetDeviceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetDeviceIDCompleted(object state) {
            if ((this.getDeviceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDeviceIDCompleted(this, new getDeviceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDeviceIDAsync() {
            this.getDeviceIDAsync(null);
        }
        
        public void getDeviceIDAsync(object userState) {
            if ((this.onBegingetDeviceIDDelegate == null)) {
                this.onBegingetDeviceIDDelegate = new BeginOperationDelegate(this.OnBegingetDeviceID);
            }
            if ((this.onEndgetDeviceIDDelegate == null)) {
                this.onEndgetDeviceIDDelegate = new EndOperationDelegate(this.OnEndgetDeviceID);
            }
            if ((this.ongetDeviceIDCompletedDelegate == null)) {
                this.ongetDeviceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDeviceIDCompleted);
            }
            base.InvokeAsync(this.onBegingetDeviceIDDelegate, null, this.onEndgetDeviceIDDelegate, this.ongetDeviceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EzTravelWeb.SessionService.IService1.BeginsetDeviceChannel(string deviceID, string channel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetDeviceChannel(deviceID, channel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool EzTravelWeb.SessionService.IService1.EndsetDeviceChannel(System.IAsyncResult result) {
            return base.Channel.EndsetDeviceChannel(result);
        }
        
        private System.IAsyncResult OnBeginsetDeviceChannel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceID = ((string)(inValues[0]));
            string channel = ((string)(inValues[1]));
            return ((EzTravelWeb.SessionService.IService1)(this)).BeginsetDeviceChannel(deviceID, channel, callback, asyncState);
        }
        
        private object[] OnEndsetDeviceChannel(System.IAsyncResult result) {
            bool retVal = ((EzTravelWeb.SessionService.IService1)(this)).EndsetDeviceChannel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsetDeviceChannelCompleted(object state) {
            if ((this.setDeviceChannelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setDeviceChannelCompleted(this, new setDeviceChannelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setDeviceChannelAsync(string deviceID, string channel) {
            this.setDeviceChannelAsync(deviceID, channel, null);
        }
        
        public void setDeviceChannelAsync(string deviceID, string channel, object userState) {
            if ((this.onBeginsetDeviceChannelDelegate == null)) {
                this.onBeginsetDeviceChannelDelegate = new BeginOperationDelegate(this.OnBeginsetDeviceChannel);
            }
            if ((this.onEndsetDeviceChannelDelegate == null)) {
                this.onEndsetDeviceChannelDelegate = new EndOperationDelegate(this.OnEndsetDeviceChannel);
            }
            if ((this.onsetDeviceChannelCompletedDelegate == null)) {
                this.onsetDeviceChannelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetDeviceChannelCompleted);
            }
            base.InvokeAsync(this.onBeginsetDeviceChannelDelegate, new object[] {
                        deviceID,
                        channel}, this.onEndsetDeviceChannelDelegate, this.onsetDeviceChannelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EzTravelWeb.SessionService.IService1.BegincheckExists(string deviceID, string channel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincheckExists(deviceID, channel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool EzTravelWeb.SessionService.IService1.EndcheckExists(System.IAsyncResult result) {
            return base.Channel.EndcheckExists(result);
        }
        
        private System.IAsyncResult OnBegincheckExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string deviceID = ((string)(inValues[0]));
            string channel = ((string)(inValues[1]));
            return ((EzTravelWeb.SessionService.IService1)(this)).BegincheckExists(deviceID, channel, callback, asyncState);
        }
        
        private object[] OnEndcheckExists(System.IAsyncResult result) {
            bool retVal = ((EzTravelWeb.SessionService.IService1)(this)).EndcheckExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OncheckExistsCompleted(object state) {
            if ((this.checkExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.checkExistsCompleted(this, new checkExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void checkExistsAsync(string deviceID, string channel) {
            this.checkExistsAsync(deviceID, channel, null);
        }
        
        public void checkExistsAsync(string deviceID, string channel, object userState) {
            if ((this.onBegincheckExistsDelegate == null)) {
                this.onBegincheckExistsDelegate = new BeginOperationDelegate(this.OnBegincheckExists);
            }
            if ((this.onEndcheckExistsDelegate == null)) {
                this.onEndcheckExistsDelegate = new EndOperationDelegate(this.OnEndcheckExists);
            }
            if ((this.oncheckExistsCompletedDelegate == null)) {
                this.oncheckExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncheckExistsCompleted);
            }
            base.InvokeAsync(this.onBegincheckExistsDelegate, new object[] {
                        deviceID,
                        channel}, this.onEndcheckExistsDelegate, this.oncheckExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult EzTravelWeb.SessionService.IService1.Begindelete(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begindelete(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool EzTravelWeb.SessionService.IService1.Enddelete(System.IAsyncResult result) {
            return base.Channel.Enddelete(result);
        }
        
        private System.IAsyncResult OnBegindelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((EzTravelWeb.SessionService.IService1)(this)).Begindelete(callback, asyncState);
        }
        
        private object[] OnEnddelete(System.IAsyncResult result) {
            bool retVal = ((EzTravelWeb.SessionService.IService1)(this)).Enddelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OndeleteCompleted(object state) {
            if ((this.deleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteCompleted(this, new deleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteAsync() {
            this.deleteAsync(null);
        }
        
        public void deleteAsync(object userState) {
            if ((this.onBegindeleteDelegate == null)) {
                this.onBegindeleteDelegate = new BeginOperationDelegate(this.OnBegindelete);
            }
            if ((this.onEnddeleteDelegate == null)) {
                this.onEnddeleteDelegate = new EndOperationDelegate(this.OnEnddelete);
            }
            if ((this.ondeleteCompletedDelegate == null)) {
                this.ondeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteCompleted);
            }
            base.InvokeAsync(this.onBegindeleteDelegate, null, this.onEnddeleteDelegate, this.ondeleteCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override EzTravelWeb.SessionService.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<EzTravelWeb.SessionService.IService1>, EzTravelWeb.SessionService.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<EzTravelWeb.SessionService.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BegingetDeviceID(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getDeviceID", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetDeviceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getDeviceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsetDeviceChannel(string deviceID, string channel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = deviceID;
                _args[1] = channel;
                System.IAsyncResult _result = base.BeginInvoke("setDeviceChannel", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndsetDeviceChannel(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("setDeviceChannel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegincheckExists(string deviceID, string channel, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = deviceID;
                _args[1] = channel;
                System.IAsyncResult _result = base.BeginInvoke("checkExists", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndcheckExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("checkExists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begindelete(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("delete", _args, callback, asyncState);
                return _result;
            }
            
            public bool Enddelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("delete", _args, result)));
                return _result;
            }
        }
    }
}
